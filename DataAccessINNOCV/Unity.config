<?xml version="1.0" encoding="utf-8" ?>
<unity xmlns="http://schemas.microsoft.com/practices/2010/unity">
    <assembly name="DataAccessINNOCV" />
     
  <typeAliases>
    <!-- Lifetimes -->
    <typeAlias alias="singleton"
               type="Microsoft.Practices.Unity.ContainerControlledLifetimeManager, 
               Microsoft.Practices.Unity" />
    <typeAlias alias="perThread"
               type="Microsoft.Practices.Unity.PerThreadLifetimeManager, 
               Microsoft.Practices.Unity" />
    <typeAlias alias="external"
               type="Microsoft.Practices.Unity.ExternallyControlledLifetimeManager, 
               Microsoft.Practices.Unity" />
    <typeAlias alias="perCall"
               type="Microsoft.Practices.Unity.TransientLifetimeManager, 
               Microsoft.Practices.Unity" />

    <!-- Custom -->
    <!-- ###################################### 1.- DEFINICIÓN DE ALIAS (INICIO) ###################################### -->
    <!--
    Estructura sección: <typeAlias alias="[ALIAS]" type="[Clase/Interfaz con el namespace completo], [Nombre ensamblado]" />
    Ejemplo arbitrario: <typeAlias alias="IoClass" type="NeoFramework.IO.UNCPathInfo, NeoFramework" />
    -->
    <!-- ###################################### 1.- DEFINICIÓN DE ALIAS  (FINAL) ###################################### -->
    <!-- Persistence -->
    <typeAlias alias="DbContext" type="System.Data.Entity.DbContext, EntityFramework" />
    <typeAlias alias="DatabaseINNOCVEntities" type="DataAccessINNOCV.DatabaseINNOCVEntities, DataAccessINNOCV.DatabaseINNOCVEntities" />

    <!-- Create Views Types -->
    <typeAlias alias="DataAccess"  type="DataAccessINNOCV.DataAccess, DataAccessINNOCV" />
     
     
  </typeAliases>
  <containers>
    <container name="RootContext">
      <types>
        <!-- Custom -->
        <type type="DataAccessINNOCV.DataAccess" mapTo="DataAccessINNOCV.DataAccess">
          <lifetime type="perCall" />
        </type>
        
        <!-- Register Views Types -->
        <type type="DataAccessINNOCV.DatabaseINNOCVEntities" mapTo="DataAccessINNOCV.DatabaseINNOCVEntities">
          <lifetime type="perCall" />
        </type>

        <!-- Persistence -->
        <type type="DbContext" mapTo="DatabaseINNOCVEntities">
          <lifetime type="perCall" />
          <constructor/>
        </type> 
        
        
        
        <!-- ###################################### 2.- DEFINICIÓN DE MAPEOS (INICIO) ###################################### -->
        <!--
        [Nota: asignar los mapeos al contenedor correspondiente: RootContext, RealAppContext, FakeAppContext u otro personal]
        Estructura sección: <type type="[Alias definido en (1) para la interfaz o clase abstracta]" mapTo="[Alias definido en (1) para la
                                        clase con constructor por defecto que se utilizará al resolver la interfaz utilizando el método 
                                        IoCFactoryBase.Resolve<Interfaz/ClaseAbstracta>(), con una posible inyección de código adicional]">
                              <lifetime type="[Alias del lifetime]" />
                            </type>
        Los posibles lifetimes son los siguientes (definidos en la primera parte de la sección <typeAliases>):
        (1) singleton -> En la primera resolución, retorna un nuevo objeto que es el mismo para todas las resoluciones posteriores.
        (2) perThread -> Cada resolución retorna un nuevo objeto, salvo que ya se haya creado uno en el thread actual, en cuyo caso se retorna
                       éste. Es análogo al lifetime singleton, pero restringido a threads
        (3) external  -> Cada resolución retorna el último objeto creado, salvo que se haya recogido por el recolector de basura, en cuyo caso
                       se crea una nueva instancia de la clase
        (4) perCall   -> Cada resolución genera un objeto nuevo de la clase independiente del resto
        
        Ejemplo: 
        Tenemos la clase ClaseA, que implementa la InterfazA, ambas en el namespace NamespaceA del proyecto ProyectoA.
        Dentro de <typeAliases> se han registrado los alias <typeAlias alias="AliasClaseA" type="ProyectoA.NamespaceA.ClaseA, ProyectoA" /> 
        y <typeAlias alias="AliasInterfazA" type="ProyectoA.NamespaceA.InterfazA, ProyectoA" />, con lo que en esta parte podemos registrar:
        <type type="AliasInterfazA" mapTo="AliasClaseA"><lifetime type="perCall" /></type>
        -->
        <!-- ###################################### 2.- DEFINICIÓN DE MAPEOS  (FINAL) ###################################### -->
        <!-- Persistence -->
        <!--<type type="DbContext" mapTo="COSRED3Entities">
          <lifetime type="perCall" />
          <constructor/>
        </type>-->

        <!-- Generated Repositories Types -->
        <!--<type type="IDevCustomerRepository" mapTo="DevCustomerRepository">
          <lifetime type="perCall" />
        </type>-->
        

        <!-- Generated DomainServices Types --> 
        <!--<type type="IBLDevCustomer" mapTo="BLDevCustomer">
          <lifetime type="perCall" />
        </type>-->
        
      </types>
    </container>

    <container name="RealAppContext">
      <types>
        <!-- Custom -->
      </types>
    </container>

    <container name="FakeAppContext">
      <!-- Custom -->
    </container>

  </containers>
</unity>
